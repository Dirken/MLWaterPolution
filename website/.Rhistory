install.packages("shiny")
install.packages("shinyjs")
install.packages("shinyWidgets")
install.packages("shinydashboard")
install.packages("lazyeval")
install.packages("plotly")
install.packages("networkD3")
shiny::runApp('C:/Users/Dirken/Downloads/UNI/POTS')
install.packages("DT")
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
install.packages("circlize")
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
install.packages("arules")
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
install.packages("fmsb")
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/POTS')
shiny::runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/website')
q()
shiny::runApp('C:/Users/Dirken/Downloads/UNI/POTS/POTS-v2.1')
runApp('C:/Users/Dirken/Downloads/UNI/POTS/POTS-v2.1')
shiny::runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
localeToCharset()
localeToCharset()
localeToCharset()
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
shiny::runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/website')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
aqua17 <- read.csv(file="DATA/AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- read.csv(file="AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- read.csv(file="./AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- read.csv(file="c/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- read.csv(file="C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- aqua17[-c(27,28),]
aqua17 <- subset(aqua17, select=-c(X))
Site <- c(rep("UB",times=26),rep("TU WIEN",24),rep("IST",25),rep("DVGW",25),rep("UH",18))
aqua17 <- cbind(Site,aqua17)
colnames(aqua17)
aqua17$CLASS <- -1
aqua17$TARGETtype <- as.factor(substr(aqua17$SAMPLES,4,5))
summary(aqua17$TARGETtype)
aqua17[which(grepl("HM",aqua17$SAMPLES)),]$CLASS <- 1     #1 REFERS TO HUMAN, -1 TO ANIMALS
aqua17$CLASS <- factor(aqua17$CLASS)
levels(aqua17$CLASS) <- c("nonhuman","human")
get.season <- function (s)
{
#April to September is SUMMER; the rest is WINTER)
season = "WINTER"
month <- strtoi(strsplit(s,"/")[[1]][2],base=10)
if (month > 3 && month < 10) {season = "SUMMER"}
season
}
aqua17$SEASON <- as.factor(sapply(aqua17$Date, get.season))
# what to do about NA in NoV column?
which(is.na(aqua17$NoV))
# Solution: set these to zero
aqua17[which(is.na(aqua17$NoV)),]$NoV <- 0
modeling.vars <- 4:33
for (i in modeling.vars)
{
aqua17[ which(grepl("<",aqua17[,i])),i ] <- 0
aqua17[,i] <- as.numeric(aqua17[,i])
}
summary(aqua17)
dim(aqua17)
detectors  <- read.table("log-detectors.tsv",header = TRUE, sep = "\t", dec=".", stringsAsFactors = FALSE)
aqua17 <- read.csv(file="C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- aqua17[-c(27,28),]
aqua17 <- subset(aqua17, select=-c(X))
Site <- c(rep("UB",times=26),rep("TU WIEN",24),rep("IST",25),rep("DVGW",25),rep("UH",18))
aqua17 <- cbind(Site,aqua17)
colnames(aqua17)
aqua17$CLASS <- -1
aqua17$TARGETtype <- as.factor(substr(aqua17$SAMPLES,4,5))
summary(aqua17$TARGETtype)
aqua17[which(grepl("HM",aqua17$SAMPLES)),]$CLASS <- 1     #1 REFERS TO HUMAN, -1 TO ANIMALS
aqua17$CLASS <- factor(aqua17$CLASS)
levels(aqua17$CLASS) <- c("nonhuman","human")
get.season <- function (s)
{
#April to September is SUMMER; the rest is WINTER)
season = "WINTER"
month <- strtoi(strsplit(s,"/")[[1]][2],base=10)
if (month > 3 && month < 10) {season = "SUMMER"}
season
}
aqua17$SEASON <- as.factor(sapply(aqua17$Date, get.season))
# what to do about NA in NoV column?
which(is.na(aqua17$NoV))
# Solution: set these to zero
aqua17[which(is.na(aqua17$NoV)),]$NoV <- 0
modeling.vars <- 4:33
for (i in modeling.vars)
{
aqua17[ which(grepl("<",aqua17[,i])),i ] <- 0
aqua17[,i] <- as.numeric(aqua17[,i])
}
summary(aqua17)
dim(aqua17)
detectors  <- read.table("log-detectors.tsv",header = TRUE, sep = "\t", dec=".", stringsAsFactors = FALSE)
detectors <- NULL
colnames(detectors)[1] <- "Site"
detectors[1:26,1] <- "UB"; detectors[27:50,1] <- "TU WIEN"; detectors[51:75,1] <- "IST"; detectors[76:100,1] <- "DVGW"; detectors[101:118,1] <- "UH"
colnames(detectors)
runApp('C:/Users/Dirken/Downloads/UNI/prova-14-12/POTS')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/website')
aqua17 <- read.csv(file="C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- aqua17[-c(27,28),]
aqua17 <- subset(aqua17, select=-c(X))
Site <- c(rep("UB",times=26),rep("TU WIEN",24),rep("IST",25),rep("DVGW",25),rep("UH",18))
aqua17 <- cbind(Site,aqua17)
colnames(aqua17)
aqua17$CLASS <- -1
aqua17$TARGETtype <- as.factor(substr(aqua17$SAMPLES,4,5))
summary(aqua17$TARGETtype)
aqua17[which(grepl("HM",aqua17$SAMPLES)),]$CLASS <- 1     #1 REFERS TO HUMAN, -1 TO ANIMALS
aqua17$CLASS <- factor(aqua17$CLASS)
levels(aqua17$CLASS) <- c("nonhuman","human")
get.season <- function (s)
{
#April to September is SUMMER; the rest is WINTER)
season = "WINTER"
month <- strtoi(strsplit(s,"/")[[1]][2],base=10)
if (month > 3 && month < 10) {season = "SUMMER"}
season
}
aqua17$SEASON <- as.factor(sapply(aqua17$Date, get.season))
# what to do about NA in NoV column?
which(is.na(aqua17$NoV))
# Solution: set these to zero
aqua17[which(is.na(aqua17$NoV)),]$NoV <- 0
modeling.vars <- 4:33
for (i in modeling.vars)
{
aqua17[ which(grepl("<",aqua17[,i])),i ] <- 0
aqua17[,i] <- as.numeric(aqua17[,i])
}
summary(aqua17)
dim(aqua17)
detectors  <- read.table("C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/log-detectors.tsv",header = TRUE, sep = "\t", dec=".", stringsAsFactors = FALSE)
colnames(detectors)[1] <- "Site"
detectors[1:26,1] <- "UB"; detectors[27:50,1] <- "TU WIEN"; detectors[51:75,1] <- "IST"; detectors[76:100,1] <- "DVGW"; detectors[101:118,1] <- "UH"
source('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/Analisi-lin.R', encoding = 'UTF-8', echo=TRUE)
aslr$sum <- aged_samples_lr( "SUMMER" , c() , correction=FALSE , mean_coef=TRUE , plot=FALSE )
aqua17 <- read.csv(file="C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/AQV_Fase1_final_10ml_Totes_variables_170619.csv",
header = TRUE, sep = ";", dec=",", check.names = TRUE,
stringsAsFactors = FALSE)
aqua17 <- aqua17[-c(27,28),]
aqua17 <- subset(aqua17, select=-c(X))
Site <- c(rep("UB",times=26),rep("TU WIEN",24),rep("IST",25),rep("DVGW",25),rep("UH",18))
aqua17 <- cbind(Site,aqua17)
colnames(aqua17)
aqua17$CLASS <- -1
aqua17$TARGETtype <- as.factor(substr(aqua17$SAMPLES,4,5))
summary(aqua17$TARGETtype)
aqua17[which(grepl("HM",aqua17$SAMPLES)),]$CLASS <- 1     #1 REFERS TO HUMAN, -1 TO ANIMALS
aqua17$CLASS <- factor(aqua17$CLASS)
levels(aqua17$CLASS) <- c("nonhuman","human")
get.season <- function (s)
{
#April to September is SUMMER; the rest is WINTER)
season = "WINTER"
month <- strtoi(strsplit(s,"/")[[1]][2],base=10)
if (month > 3 && month < 10) {season = "SUMMER"}
season
}
aqua17$SEASON <- as.factor(sapply(aqua17$Date, get.season))
# what to do about NA in NoV column?
which(is.na(aqua17$NoV))
# Solution: set these to zero
aqua17[which(is.na(aqua17$NoV)),]$NoV <- 0
modeling.vars <- 4:33
for (i in modeling.vars)
{
aqua17[ which(grepl("<",aqua17[,i])),i ] <- 0
aqua17[,i] <- as.numeric(aqua17[,i])
}
summary(aqua17)
dim(aqua17)
detectors  <- read.table("C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/log-detectors.tsv",header = TRUE, sep = "\t", dec=".", stringsAsFactors = FALSE)
colnames(detectors)[1] <- "Site"
detectors[1:26,1] <- "UB"; detectors[27:50,1] <- "TU WIEN"; detectors[51:75,1] <- "IST"; detectors[76:100,1] <- "DVGW"; detectors[101:118,1] <- "UH"
colnames(detectors)
# in fact if you look at the log of the detectors, they are all the same for each column so we just need that vector
#colMeans(detectors[,attributes(aslr$sum)$names])
detectors <- detectors[1,]
aged_samples_lr <- function( season , orig_data , correction , mean_coef , plot ){
aged_samples_lr_list <- list()      # list that will be returned
if ( plot ){ par( ask = TRUE ) }   # if plot is TRUE: requiring user key event to continue interpreting code
for ( attr in c("EC","FE","CP","SomPhg","HMBactPhg","CWBactPhg","PGBactPhg","PLBactPhg","BifSorb", "BifTot",
"HMBif", "CWBif", "PGNeo", "PLBif","TLBif", "NoV") ){
# reading all the samples for the corresponding attribute and season, BifMol tab
aged_samples_file_name <- paste( "persist/" , attr , "-" , season , ".txt" , sep = "" )
if(attr %in% c("TLBif", "HMBif", "CWBif", "PGNeo", "PLBif") ){
aged_samples_file_name <- paste( "persist/" , "BifMol" , "-" , season , ".txt" , sep = "" )
}
# reading all the samples for the corresponding attribute and season, BactPhg tab
if(attr %in% c("HMBactPhg","CWBactPhg","PGBactPhg","PLBactPhg") ){
aged_samples_file_name <- paste( "persist/" , "BactPhg" , "-" , season , ".txt" , sep = "" )
}
aged_samples <- read.csv( blank.lines.skip=TRUE, file = aged_samples_file_name , header = FALSE , sep = "" , col.names = c( "time" , "value" ), comment.char="#",dec = ","  )
essays_coef <- list() # where the assays LR coefficients (slope and increment) will be stored
# obtaining in which indexes of the aged samples start each one of the essays (new essay => t=0)
essay_splits <- c( which( aged_samples$time == 0 ) , length( aged_samples$time ) + 1 )
essay_splits <- essay_splits[ -1 ] # removing the first (there will always be a zero on first aged_samples row)
last_split <- 1 # initializing last split variable to the beginning of th first essay
# for each one of the essays of the current attribute and season
for ( split in essay_splits ){      # obtaining the samples of the current essay
essay_samples <- aged_samples[ last_split : ( split - 1 ) , ] # selecting only the essay_samples
#TODO: will we use this? probably not, but if so we need to move HUMAN constant to top
if ( correction ){    #values are considered slightly diluted and therefore are corrected
# correction is done using the log10 of the median of the attribute human rows of the original matrix
essay_samples[ , 2 ] <- essay_samples[ , 2 ] +
log10( median( orig_data[ which( orig_data$CLASS == HUMAN ) , attr ] ) ) - aged_samples[ last_split , 2 ]
}
# performing LR over the current essay values and storing in the list of all the essays LR coefficients
essays_coef <- c( essays_coef , list( lm( value ~ time , data = essay_samples )$coefficients ) )
if ( plot ){ plot( essay_samples[ , 1 ] , essay_samples[ , 2 ], main = attr ) }  #plotting the samples and the line
if ( plot ){ abline( coef = lm( value ~ time , data = essay_samples )$coefficients ) } #corresponding to the regression
last_split <- split# updating last_split variable for the next iteration
}
# converting essay_coef list to a matrix, will have two columns (intercept and slope) and as rows as essays
essays_coef <- do.call( rbind , essays_coef )
# if mean_coef is TRUE, the mean of all essays slope and increment is returned,
# otherwise a matrix with the slopes and increments for each one of the essays is returned
if ( mean_coef ){ aged_samples_lr_list[[ attr ]] <- c( mean( essays_coef[ , 1 ] ) , mean( essays_coef[ , 2 ] ) )}
else { aged_samples_lr_list[[ attr ]] <- essays_coef }
}
aged_samples_lr_list    # returning list with all the results
}
aslr <- c()
aslr$sum <- aged_samples_lr( "SUMMER" , c() , correction=FALSE , mean_coef=TRUE , plot=FALSE )
aslr$win <- aged_samples_lr( "WINTER" , c() , correction=FALSE , mean_coef=TRUE , plot=FALSE )
example(loess)
shiny::runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
shinyWidgets::shinyWidgetsGallery()
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
install.packages("ggplotRegression")
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
ggplotRegression(lm(Sepal.Length ~ Petal.Width, data = iris))
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(lm(Sepal.Length ~ Petal.Width, data = iris))
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
shiny::runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
ggplotRegression(lm(Sepal.Length ~ Petal.Width, data = iris))
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
shiny::runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
shinyWidgets::shinyWidgetsGallery()
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
?numericInput
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
?numericInput
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
shinyWidgets::shinyWidgetsGallery()
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
?pickerInput
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
detectors  <- read.table("C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/toIntegrate/RicardM/log-detectors.tsv",
header = TRUE, sep = "\t", dec=".", stringsAsFactors = FALSE)
detectors  <- read.table("C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website/files/machineLearning/log-detectors.tsv",
header = TRUE, sep = "\t", dec=".", stringsAsFactors = FALSE)
detectors
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
devtools::install_github("ericrayanderson/shinymaterial")
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
runApp('C:/Users/Dirken/Downloads/UNI/MLWaterPolution/website')
